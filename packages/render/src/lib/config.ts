import { resolve } from 'node:path';
import { homedir } from 'node:os';
import { CLIParser } from './CLIParser';


export interface Config {
  sourceHtmlFile: string; // The origin html file generated by build tools like vit.
  sourceJsFile: string;
  sourceCssFile: string;

  deployRootDir: string;
  deployHtmlDir: string;
  deployAssetDir: string;

  staticPrefix: string; // Used when rendering html template.
  packageDir: string; // The directory containing package.json.
  
  targetHtmlFile: string; // Intermediate file for html template.
  targetVersionFile: string; // A plain text file containing a string of app version.
}

export function buildConfig(props: {
  clientName: string,
  backendName: string,
}): Config {

  const cli = (new CLIParser()).parse();
  
  const deployRootDir = resolve(
    homedir(),
    'GolandProjects',
    props.backendName,
  );
  
  const deployHtmlDir = resolve(
    deployRootDir,
    'web/template',
    props.clientName
  );
  
  const deployAssetDir = cli.isProd
     // To server.
  ? resolve(
      homedir(),
      'svn-online/ftac/frontend',
      props.clientName,
    )
  // To dev folder
  : resolve(
      deployRootDir,
      'build/public/static/frontend',
      props.clientName
    );
  
  return {
    sourceHtmlFile: resolve(process.cwd(), 'dist/index.html'),
    sourceJsFile: `dist/assets/*.js`,
    sourceCssFile: `dist/assets/*.css`,

    deployRootDir,
    deployHtmlDir,
    deployAssetDir,

    staticPrefix: `/static/frontend/${props.clientName}`,
    packageDir: resolve(process.cwd(), 'package.json'),
    
    targetHtmlFile: resolve(process.cwd(), 'dist/home.html'),
    targetVersionFile: resolve(process.cwd(), `dist/client_version_${props.clientName}`),
  }
}
